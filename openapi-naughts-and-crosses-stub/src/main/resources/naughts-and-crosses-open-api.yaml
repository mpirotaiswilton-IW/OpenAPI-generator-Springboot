openapi: 3.0.1
info:
  title: Naughts and Crosses
  description: An API that allows users to play  games of Naughts and crosses
  version: v1.0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Authentication Controller
    description: >-
      Authenticates users to have access to send requests other than get
      requests
  - name: Game Controller
    description: Create, Join, Play and Delete games of naughts and crosses
  - name: User Controller
    description: Registers, retrieves and deletes users
paths:
  /game/{id}/play/{move}:
    put:
      tags:
        - Game Controller
      summary: Play a Move
      description: Make a move in the game specified by it's id
      operationId: playMove
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: move
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfully played a move in game
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        '400':
          description: >-
            Illegal move/attempted a move when not user's turn or not joined
            game/Game has not started or has finished
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /game/join/{id}:
    put:
      tags:
        - Game Controller
      summary: Join Game
      description: Join a created game based on it's id
      operationId: joinGame
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully joined game
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: >-
            Game already has been joined/User is trying to join game they
            created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /game/forfeit/{id}:
    put:
      tags:
        - Game Controller
      summary: Forfeit Game
      description: Hands victory to adversary in game specified by it's id
      operationId: forfeitGame
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully forfeited game
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Game doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/register:
    post:
      tags:
        - User Controller
      summary: Registers User
      description: >-
        Returns a JSON object of the newly registered user (without the encoded
        password)
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: Successfully created new user
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: >-
            Invalid UserRequest object sent/No body sent/username submitted
            already is in the database
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /game/:
    get:
      tags:
        - Game Controller
      summary: Retrieves All Games
      description: Provides a list of JSON ojects of all games in the app database
      operationId: GetAllGames
      responses:
        '200':
          description: Successfully retrieval of all games
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    post:
      tags:
        - Game Controller
      summary: Create New Game
      description: Creates a new game based on a user's JWT token
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequest'
        required: true
      responses:
        '201':
          description: Successful game creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Bad request body
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /authenticate:
    post:
      tags:
        - Authentication Controller
      summary: Authenticate User
      description: Returns a JWT token for a registered user
      operationId: createUser_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: Successful authentication
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: Invalid UserRequest object sent/No body sent
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{id}:
    get:
      tags:
        - User Controller
      summary: Retrieves User's Username
      description: Provides a specified user's username by the user's Id
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful retreival of user username
          content:
            '*/*':
              schema:
                type: string
        '404':
          description: User doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - User Controller
      summary: Delete User Any
      description: >-
        Deletes an authorized user from the API's database as an authorized
        "admin" level user 
      operationId: createUser_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful user deletion
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden, user does not have "admin" role
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{id}/games:
    get:
      tags:
        - User Controller
      summary: Retrieves All User's Games
      description: >-
        Provides a list of JSON ojects of all games in the app database played
        by a user, filtered with their Id
      operationId: getAllGamesFromUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful retreival of user's games
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '404':
          description: User doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/:
    get:
      tags:
        - User Controller
      summary: Retrieves All Users
      description: >-
        Provides a list of JSON ojects of all users in the app database (without
        their passwords)
      operationId: getAllUserName
      responses:
        '200':
          description: Successful retrieval of all users
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /game/{id}:
    get:
      tags:
        - Game Controller
      summary: Retrieves Game
      description: Provides a specified game as a JSON object by the game's Id
      operationId: GetGameById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful retrieval of game
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: Game of specified id doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Game Controller
      summary: Delete Game
      description: >-
        Deletes a created game based on it's id. "player" level users can only
        delete games they created, "admin" level users can delete any game in
        the app
      operationId: deleteGame
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted game
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: User not cleared to delete game because of access level
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/self:
    delete:
      tags:
        - User Controller
      summary: Delete User Self
      description: >-
        Deletes an authorized "player" level user's own account from the API's
        database
      operationId: deleteUserSelf
      responses:
        '204':
          description: Successful user's self deletion
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, no JWT entered/unauthenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden, user does not have "player" role
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User doesn't exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: array
          items:
            type: string
    Game:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date
        dateStarted:
          type: string
          format: date
        dateEnded:
          type: string
          format: date
        lastActionDate:
          type: string
          format: date
        doesPrimaryUserStart:
          type: boolean
        gameState:
          type: string
          enum:
            - INITIALIZED
            - ACTIVE
            - PRIMARY_WIN
            - SECONDARY_WIN
            - DRAW
            - ARCHIVED
        moves:
          type: array
          items:
            type: string
        primaryUser:
          $ref: '#/components/schemas/User'
        secondaryUser:
          $ref: '#/components/schemas/User'
        primaryUserOs:
          type: boolean
    Role:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    User:
      required:
        - password
        - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
          writeOnly: true
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    UserRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    GameRequest:
      required:
        - doesPrimaryUserStart
        - isPrimaryUserOs
      type: object
      properties:
        doesPrimaryUserStart:
          type: boolean
        isPrimaryUserOs:
          type: boolean
    AuthRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
